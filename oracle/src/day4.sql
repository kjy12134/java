-- 1/14
-- DDL
CREATE TABLE TABLE_NOTNULL
(	ID	CHAR(3) NOT NULL,
	SNAME	VARCHAR(20)
);

INSERT INTO TABLE_NOTNULL VALUES ('100', 'ORACLE');
INSERT INTO TABLE_NOTNULL VALUES (NULL, 'ORACLE');

-- ERROR. NOT NULL 제약조건은 컬럼 레벨에서만 정의 가능
CREATE TABLE TABLE_NOTNULL2
(
	ID	CHAR(3),
	SNAME	VARCHAR(20),
	CONSTRAINT TN2_ID_NN NOT NULL (ID)
);

-- PK 제약조건 (NOT NULL + UNIQUE)
CREATE TABLE TABLE_PK
(
	ID	CHAR(3)	PRIMARY KEY,
	SNAME	VARCHAR2(20)
);

INSERT INTO TABLE_PK
VALUES ('100', 'ORACLE')


INSERT INTO TABLE_PK
VALUES ('100', 'IBM')


INSERT INTO TABLE_PK
VALUES (NULL, 'ORACLE')


-- REFERENCES
CREATE TABLE TABLE_FK 
(
	ID	CHAR(3),
	SNAME VARCHAR2(20),
	LID	CHAR(2) REFERENCES LOCATION (LOCATION_ID)
)


INSERT INTO TABLE_FK
VALUES ('200', 'ORACLE', 'A1');

-- ERROR (참조 테이블 컬럼의 기본키에 없는 데이터값)
INSERT INTO TABLE_FK
VALUES ('200', 'ORACLE', 'C1');


-- FOREIGN KEY
CREATE TABLE TABLE_FK2
(
	ID	CHAR(3),
	SNAME	VARCHAR2(20),
	LID	CHAR(2),
	FOREIGN KEY (LID) REFERENCES LOCATION (LOCATION_ID)
);


-- CHECK
CREATE TABLE TABLE_CHECK
(
	EMP_ID	CHAR(3) PRIMARY KEY,
	SALARY	NUMBER CHECK (SALARY > 0),
	MARRIAGE CHAR(1),
	CONSTRAINT CHK_MRG CHECK (MARRIAGE IN ('Y', 'N'))
);

-- ERROR
INSERT INTO TABLE_CHECK
VALUES ('100', -100, 'N');

INSERT INTO TABLE_CHECK
VALUES ('100', 100, '?');


-- CREATE TABLE 시 SUBQUERY 사용가능. 단, 반드시 'AS' 키워드 사용해야 함.
-- 기본키는 자동으로 전위되지 않음.
-- 제약조건을 추가해야 한다. ( ALTER TABLE)
-- 컬럼명은 자동으로 서브쿼리 내 컬럼, 컬럼명을 변경하려는 경우
-- SUBQUERY 자체에 별칭을 준다.
-- CREATE TABLE (NAME1, NAME2, ...) 구문 사용

CREATE TABLE TABLE_SUBQUERY1 AS 
SELECT	EMP_ID, EMP_NAME, SALARY, DEPT_NAME, JOB_TITLE
FROM	EMPLOYEE
LEFT JOIN	DEPARTMENT USING (DEPT_ID)
LEFT JOIN	JOB USING (JOB_ID);

-- ALTER TABLE (컬럼 추가)
ALTER TABLE DEPARTMENT
ADD (MGR_ID CHAR(3));

ALTER TABLE DEPARTMENT
ADD (MGR_ID2 CHAR(3) DEFAULT '101');

SELECT * FROM DEPARTMENT;

-- 제약조건 추가 
CREATE TABLE EMP3 AS (SELECT * FROM EMPLOYEE);

ALTER TABLE EMP3
ADD PRIMARY KEY (EMP_ID)
ADD UNIQUE (EMP_NO)
MODIFY HIRE_DATE NOT NULL;

SELECT * FROM EMP3;

-- DROP TABLE (테이블 삭제)
CREATE TABLE DEPT
(
	DID		CHAR(2)	PRIMARY KEY,
	DNAME	VARCHAR2(10)
);

CREATE TABLE EMP6
(
	EID		CHAR(3) PRIMARY KEY,
	ENAME	VARCHAR2(10),
	DID		CHAR(2) REFERENCES DEPT
);

-- ERROR
DROP TABLE DEPT;

DROP TABLE DEPT CASCADE CONSTRAINTS;


-- INLINE VIEW ** 
CREATE OR REPLACE VIEW V_DEPT_SALARVG ("Did", "Davg")
AS (SELECT	NVL(DEPT_ID, 'N/A'),
			ROUND(AVG(SALARY), -3)
	FROM	EMPLOYEE
	GROUP BY DEPT_ID
);

SELECT	EMP_NAME, SALARY
FROM	EMPLOYEE
JOIN	V_DEPT_SALARVG ON ( NVL(DEPT_ID, 'N/A') = "Did")
WHERE	SALARY > "Davg"
ORDER BY 2 DESC;

SELECT 	EMP_NAME, SALARY
FROM	(	SELECT	NVL(DEPT_ID, 'N/A') AS "Did",
					ROUND(AVG(SALARY), -3) AS "Davg"
			FROM	EMPLOYEE
			GROUP BY DEPT_ID	) INLV
JOIN	EMPLOYEE ON (NVL(DEPT_ID, 'N/A') = INLV."Did")
WHERE	SALARY > INLV."Davg"
ORDER BY 2 DESC;


-- ROWNUM
-- ROWNUM = 3 (특정 행 WHERE절에 사용 불가. 단, ROWNUM = 1 은 가능)
-- ROWNUM <= 5 는 가능 (범위에 해당하는 조건은 가능)
SELECT	ROWNUM, EMP_NAME, SALARY
FROM	(SELECT	NVL(DEPT_ID, 'N/A') AS "Did",
					ROUND(AVG(SALARY), -3) AS "Davg"
			FROM	EMPLOYEE
			GROUP BY DEPT_ID	) INLV
JOIN	EMPLOYEE ON (NVL(DEPT_ID, 'N/A') = INLV."Did")
WHERE	SALARY > INLV."Davg"
ORDER BY 3 DESC;

-- 최상위 월급 5명(Top N 분석 * )
-- INLINE VIEW에 정렬이 먼저 이루어져야 함.
SELECT	ROWNUM, EMP_NAME, SALARY
FROM	(	SELECT	EMP_NAME, SALARY
			FROM	(SELECT	NVL(DEPT_ID, 'N/A') AS "Did",
							ROUND(AVG(SALARY), -3) AS "Davg"
					 FROM	EMPLOYEE
					 GROUP BY DEPT_ID
					 ) INLV
			JOIN	EMPLOYEE ON (NVL(DEPT_ID, 'N/A') = INLV."Did")
			WHERE	SALARY > INLV."Davg"
			ORDER BY 2 DESC )
WHERE	ROWNUM <= 5;


--RANK함수 (순위) 
--[RANK (~) WITHIN GROUP (~)]
--[RANK() OVER (~)]
SELECT	RANK(2300000) WITHIN GROUP (ORDER BY SALARY DESC) AS RANK
FROM	EMPLOYEE;

-- ** 5번째로 연봉 많이 받는 사람 
SELECT *
FROM ( SELECT	EMP_NAME, SALARY,
				RANK() OVER (ORDER BY SALARY DESC) AS RANK
		FROM	EMPLOYEE )
WHERE RANK = 5;




--- SEQUENCE.... 
-- 기본키로 많이 사용
CREATE SEQUENCE SEQID
INCREMENT BY 1
START WITH 300
MAXVALUE 310
NOCYCLE NOCACHE;

INSERT INTO EMPLOYEE (EMP_ID, EMP_NO, EMP_NAME)
VALUES (TO_CHAR(SEQID.NEXTVAL), '850130-1558215', '김영민');

INSERT INTO EMPLOYEE (EMP_ID, EMP_NO, EMP_NAME)
VALUES (TO_CHAR(SEQID.NEXTVAL), '840130-1558215', '구진표');

SELECT	EMP_ID, EMP_NO, EMP_NAME
FROM	EMPLOYEE
ORDER BY 1 DESC;

